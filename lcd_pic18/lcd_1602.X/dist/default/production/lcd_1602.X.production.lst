

Microchip MPLAB XC8 Assembler V2.36 build 20220127204148 
                                                                                               Sun Aug 28 18:02:24 2022

Microchip MPLAB XC8 C Compiler v2.36 (Free license) build 20220127204148 Og1 
     1                           	processor	18F45K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 05/05/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F45K22 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     _ANSELB	set	3897
    58  0000                     _LATDbits	set	3980
    59  0000                     _LATEbits	set	3981
    60  0000                     _TRISBbits	set	3987
    61  0000                     _TRISDbits	set	3989
    62  0000                     _TRISEbits	set	3990
    63  0000                     _LATBbits	set	3978
    64                           
    65                           	psect	smallconst
    66  000600                     __psmallconst:
    67                           	callstack 0
    68  000600  00                 	db	0
    69  000601                     STR_1:
    70                           
    71                           ; BSR set to: 15
    72  000601  20                 	db	32
    73  000602  20                 	db	32
    74  000603  4C                 	db	76	;'L'
    75  000604  43                 	db	67	;'C'
    76  000605  44                 	db	68	;'D'
    77  000606  20                 	db	32
    78  000607  44                 	db	68	;'D'
    79  000608  69                 	db	105	;'i'
    80  000609  73                 	db	115	;'s'
    81  00060A  70                 	db	112	;'p'
    82  00060B  6C                 	db	108	;'l'
    83  00060C  61                 	db	97	;'a'
    84  00060D  79                 	db	121	;'y'
    85  00060E  20                 	db	32
    86  00060F  20                 	db	32
    87  000610  00                 	db	0
    88  000611                     STR_2:
    89                           
    90                           ; BSR set to: 15
    91  000611  20                 	db	32
    92  000612  20                 	db	32
    93  000613  34                 	db	52	;'4'
    94  000614  2D                 	db	45
    95  000615  62                 	db	98	;'b'
    96  000616  69                 	db	105	;'i'
    97  000617  74                 	db	116	;'t'
    98  000618  20                 	db	32
    99  000619  6D                 	db	109	;'m'
   100  00061A  6F                 	db	111	;'o'
   101  00061B  64                 	db	100	;'d'
   102  00061C  65                 	db	101	;'e'
   103  00061D  00                 	db	0
   104  00061E  00                 	db	0	; dummy byte at the end
   105  0000                     
   106                           ; #config settings
   107                           
   108                           	psect	cinit
   109  0009A0                     __pcinit:
   110                           	callstack 0
   111  0009A0                     start_initialization:
   112                           	callstack 0
   113  0009A0                     __initialization:
   114                           	callstack 0
   115  0009A0                     end_of_initialization:
   116                           	callstack 0
   117  0009A0                     __end_of__initialization:
   118                           	callstack 0
   119  0009A0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   120  0009A2  6EF8               	movwf	tblptru,c
   121  0009A4  0100               	movlb	0
   122  0009A6  EFF1  F003         	goto	_main	;jump to C main() function
   123                           
   124                           	psect	cstackCOMRAM
   125  000001                     __pcstackCOMRAM:
   126                           	callstack 0
   127  000001                     LCD_Write_Data@Data:
   128                           	callstack 0
   129                           
   130                           ; 1 bytes @ 0x0
   131  000001                     	ds	1
   132  000002                     ??_LCD_Write_Data:
   133                           
   134                           ; 1 bytes @ 0x1
   135  000002                     	ds	1
   136  000003                     LCD_Write_Data@RS:
   137                           	callstack 0
   138                           
   139                           ; 1 bytes @ 0x2
   140  000003                     	ds	1
   141  000004                     DisplayLCD_Cmd@CmdLCD:
   142                           	callstack 0
   143  000004                     DisplayLCD_Chr_Cp@Tchar:
   144                           	callstack 0
   145  000004                     DisplayLCD_Out_Cp@Ponteiro:
   146                           	callstack 0
   147                           
   148                           ; 2 bytes @ 0x3
   149  000004                     	ds	1
   150  000005                     ??_DisplayLCD_Init:
   151  000005                     DisplayLCD_Chr@Coluna:
   152                           	callstack 0
   153                           
   154                           ; 1 bytes @ 0x4
   155  000005                     	ds	1
   156  000006                     DisplayLCD_Out@Coluna:
   157                           	callstack 0
   158  000006                     DisplayLCD_Chr@Tchar:
   159                           	callstack 0
   160                           
   161                           ; 1 bytes @ 0x5
   162  000006                     	ds	1
   163  000007                     ??_DisplayLCD_Chr:
   164  000007                     DisplayLCD_Out@TextoLCD:
   165                           	callstack 0
   166                           
   167                           ; 2 bytes @ 0x6
   168  000007                     	ds	2
   169  000009                     ??_DisplayLCD_Out:
   170  000009                     DisplayLCD_Chr@Linha:
   171                           	callstack 0
   172                           
   173                           ; 1 bytes @ 0x8
   174  000009                     	ds	2
   175  00000B                     DisplayLCD_Out@Linha:
   176                           	callstack 0
   177                           
   178                           ; 1 bytes @ 0xA
   179  00000B                     	ds	1
   180  00000C                     ??_main:
   181                           
   182                           ; 1 bytes @ 0xB
   183  00000C                     	ds	2
   184                           
   185 ;;
   186 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   187 ;;
   188 ;; *************** function _main *****************
   189 ;; Defined at:
   190 ;;		line 357 in file "main.c"
   191 ;; Parameters:    Size  Location     Type
   192 ;;		None
   193 ;; Auto vars:     Size  Location     Type
   194 ;;		None
   195 ;; Return value:  Size  Location     Type
   196 ;;                  1    wreg      void 
   197 ;; Registers used:
   198 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   199 ;; Tracked objects:
   200 ;;		On entry : 0/0
   201 ;;		On exit  : 0/0
   202 ;;		Unchanged: 0/0
   203 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   204 ;;      Params:         0       0       0       0       0       0       0
   205 ;;      Locals:         0       0       0       0       0       0       0
   206 ;;      Temps:          2       0       0       0       0       0       0
   207 ;;      Totals:         2       0       0       0       0       0       0
   208 ;;Total ram usage:        2 bytes
   209 ;; Hardware stack levels required when called: 4
   210 ;; This function calls:
   211 ;;		_ConfigMCU
   212 ;;		_DisplayLCD_Chr
   213 ;;		_DisplayLCD_Chr_Cp
   214 ;;		_DisplayLCD_Cmd
   215 ;;		_DisplayLCD_Init
   216 ;;		_DisplayLCD_Out
   217 ;; This function is called by:
   218 ;;		Startup code after reset
   219 ;; This function uses a non-reentrant model
   220 ;;
   221                           
   222                           	psect	text0
   223  0007E2                     __ptext0:
   224                           	callstack 0
   225  0007E2                     _main:
   226                           	callstack 27
   227  0007E2                     
   228                           ;main.c: 360:  ConfigMCU();
   229  0007E2  ECD5  F004         	call	_ConfigMCU	;wreg free
   230  0007E6                     
   231                           ;main.c: 362:  TRISBbits.TRISB0 = 0;
   232  0007E6  9093               	bcf	147,0,c	;volatile
   233  0007E8                     
   234                           ;main.c: 363:  TRISBbits.TRISB1 = 0;
   235  0007E8  9293               	bcf	147,1,c	;volatile
   236  0007EA                     
   237                           ;main.c: 365:  DisplayLCD_Init();
   238  0007EA  ECAE  F003         	call	_DisplayLCD_Init	;wreg free
   239  0007EE                     
   240                           ;main.c: 366:  DisplayLCD_Cmd((0x01));
   241  0007EE  0E01               	movlw	1
   242  0007F0  ECC2  F004         	call	_DisplayLCD_Cmd
   243  0007F4                     
   244                           ;main.c: 367:  DisplayLCD_Out(1, 1, "  LCD Display  ");
   245  0007F4  0E01               	movlw	1
   246  0007F6  6E06               	movwf	DisplayLCD_Out@Coluna^0,c
   247  0007F8  0E01               	movlw	low STR_1
   248  0007FA  6E07               	movwf	DisplayLCD_Out@TextoLCD^0,c
   249  0007FC  0E06               	movlw	high STR_1
   250  0007FE  6E08               	movwf	(DisplayLCD_Out@TextoLCD+1)^0,c
   251  000800  0E01               	movlw	1
   252  000802  EC32  F004         	call	_DisplayLCD_Out
   253  000806                     
   254                           ;main.c: 368:  DisplayLCD_Out(2, 1, "  4-bit mode");
   255  000806  0E01               	movlw	1
   256  000808  6E06               	movwf	DisplayLCD_Out@Coluna^0,c
   257  00080A  0E11               	movlw	low STR_2
   258  00080C  6E07               	movwf	DisplayLCD_Out@TextoLCD^0,c
   259  00080E  0E06               	movlw	high STR_2
   260  000810  6E08               	movwf	(DisplayLCD_Out@TextoLCD+1)^0,c
   261  000812  0E02               	movlw	2
   262  000814  EC32  F004         	call	_DisplayLCD_Out
   263  000818                     
   264                           ;main.c: 369:  DisplayLCD_Chr(2, 13, 'A');
   265  000818  0E0D               	movlw	13
   266  00081A  6E05               	movwf	DisplayLCD_Chr@Coluna^0,c
   267  00081C  0E41               	movlw	65
   268  00081E  6E06               	movwf	DisplayLCD_Chr@Tchar^0,c
   269  000820  0E02               	movlw	2
   270  000822  EC66  F004         	call	_DisplayLCD_Chr
   271  000826                     
   272                           ;main.c: 370:  DisplayLCD_Chr_Cp('%');
   273  000826  0E25               	movlw	37
   274  000828  ECC9  F004         	call	_DisplayLCD_Chr_Cp
   275  00082C                     l1050:
   276                           
   277                           ;main.c: 373:  {;main.c: 374:   LATBbits.LATB1 = 1;
   278  00082C  828A               	bsf	138,1,c	;volatile
   279  00082E                     
   280                           ;main.c: 375:   _delay((unsigned long)((500)*(8000000/4000.0)));
   281  00082E  0E06               	movlw	6
   282  000830  6E0D               	movwf	(??_main+1)^0,c
   283  000832  0E13               	movlw	19
   284  000834  6E0C               	movwf	??_main^0,c
   285  000836  0EAE               	movlw	174
   286  000838                     u377:
   287  000838  2EE8               	decfsz	wreg,f,c
   288  00083A  D7FE               	bra	u377
   289  00083C  2E0C               	decfsz	??_main^0,f,c
   290  00083E  D7FC               	bra	u377
   291  000840  2E0D               	decfsz	(??_main+1)^0,f,c
   292  000842  D7FA               	bra	u377
   293  000844                     
   294                           ;main.c: 376:   LATBbits.LATB1 = 0;
   295  000844  928A               	bcf	138,1,c	;volatile
   296  000846                     
   297                           ;main.c: 377:   _delay((unsigned long)((500)*(8000000/4000.0)));
   298  000846  0E06               	movlw	6
   299  000848  6E0D               	movwf	(??_main+1)^0,c
   300  00084A  0E13               	movlw	19
   301  00084C  6E0C               	movwf	??_main^0,c
   302  00084E  0EAE               	movlw	174
   303  000850                     u387:
   304  000850  2EE8               	decfsz	wreg,f,c
   305  000852  D7FE               	bra	u387
   306  000854  2E0C               	decfsz	??_main^0,f,c
   307  000856  D7FC               	bra	u387
   308  000858  2E0D               	decfsz	(??_main+1)^0,f,c
   309  00085A  D7FA               	bra	u387
   310  00085C  EF16  F004         	goto	l1050
   311  000860  EF00  F000         	goto	start
   312  000864                     __end_of_main:
   313                           	callstack 0
   314                           
   315 ;; *************** function _DisplayLCD_Out *****************
   316 ;; Defined at:
   317 ;;		line 287 in file "main.c"
   318 ;; Parameters:    Size  Location     Type
   319 ;;  Linha           1    wreg     unsigned char 
   320 ;;  Coluna          1    5[COMRAM] unsigned char 
   321 ;;  TextoLCD        2    6[COMRAM] PTR unsigned char 
   322 ;;		 -> STR_2(13), STR_1(16), 
   323 ;; Auto vars:     Size  Location     Type
   324 ;;  Linha           1   10[COMRAM] unsigned char 
   325 ;; Return value:  Size  Location     Type
   326 ;;                  1    wreg      void 
   327 ;; Registers used:
   328 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   329 ;; Tracked objects:
   330 ;;		On entry : 0/0
   331 ;;		On exit  : 0/0
   332 ;;		Unchanged: 0/0
   333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   334 ;;      Params:         3       0       0       0       0       0       0
   335 ;;      Locals:         1       0       0       0       0       0       0
   336 ;;      Temps:          2       0       0       0       0       0       0
   337 ;;      Totals:         6       0       0       0       0       0       0
   338 ;;Total ram usage:        6 bytes
   339 ;; Hardware stack levels used: 1
   340 ;; Hardware stack levels required when called: 3
   341 ;; This function calls:
   342 ;;		_DisplayLCD_Out_Cp
   343 ;;		_LCD_Write_Data
   344 ;; This function is called by:
   345 ;;		_main
   346 ;; This function uses a non-reentrant model
   347 ;;
   348                           
   349                           	psect	text1
   350  000864                     __ptext1:
   351                           	callstack 0
   352  000864                     _DisplayLCD_Out:
   353                           	callstack 27
   354                           
   355                           ;incstack = 0
   356                           ;DisplayLCD_Out@Linha stored from wreg
   357  000864  6E0B               	movwf	DisplayLCD_Out@Linha^0,c
   358  000866                     
   359                           ;main.c: 287: void DisplayLCD_Out(unsigned char Linha, unsigned char Coluna,;main.c: 288
      +                          :      unsigned char *TextoLCD);main.c: 289: {;main.c: 290:  LATEbits.LATE2 = 0;
   360  000866  948D               	bcf	141,2,c	;volatile
   361                           
   362                           ;main.c: 291:  switch (Linha)
   363  000868  EF4A  F004         	goto	l1004
   364  00086C                     l994:
   365                           
   366                           ;main.c: 294:  {;main.c: 295:   Coluna = Coluna + 0X7F;
   367  00086C  5006               	movf	DisplayLCD_Out@Coluna^0,w,c
   368  00086E  0F7F               	addlw	127
   369  000870  6E06               	movwf	DisplayLCD_Out@Coluna^0,c
   370  000872                     
   371                           ;main.c: 296:   LCD_Write_Data(0, Coluna);
   372  000872  C006  F001         	movff	DisplayLCD_Out@Coluna,LCD_Write_Data@Data
   373  000876  0E00               	movlw	0
   374  000878  EC10  F003         	call	_LCD_Write_Data
   375                           
   376                           ;main.c: 298:   break;
   377  00087C  EF5F  F004         	goto	l1006
   378  000880                     l998:
   379                           
   380                           ;main.c: 301:  {;main.c: 302:   Coluna = Coluna + 0xBF;
   381  000880  5006               	movf	DisplayLCD_Out@Coluna^0,w,c
   382  000882  0FBF               	addlw	191
   383  000884  6E06               	movwf	DisplayLCD_Out@Coluna^0,c
   384  000886                     
   385                           ;main.c: 303:   LCD_Write_Data(0, Coluna);
   386  000886  C006  F001         	movff	DisplayLCD_Out@Coluna,LCD_Write_Data@Data
   387  00088A  0E00               	movlw	0
   388  00088C  EC10  F003         	call	_LCD_Write_Data
   389                           
   390                           ;main.c: 305:   break;
   391  000890  EF5F  F004         	goto	l1006
   392  000894                     l1004:
   393  000894  500B               	movf	DisplayLCD_Out@Linha^0,w,c
   394  000896  6E09               	movwf	??_DisplayLCD_Out^0,c
   395  000898  6A0A               	clrf	(??_DisplayLCD_Out+1)^0,c
   396                           
   397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   398                           ; Switch size 1, requested type "simple"
   399                           ; Number of cases is 1, Range of values is 0 to 0
   400                           ; switch strategies available:
   401                           ; Name         Instructions Cycles
   402                           ; simple_byte            4     3 (average)
   403                           ;	Chosen strategy is simple_byte
   404  00089A  500A               	movf	(??_DisplayLCD_Out+1)^0,w,c
   405  00089C  0A00               	xorlw	0	; case 0
   406  00089E  B4D8               	btfsc	status,2,c
   407  0008A0  EF54  F004         	goto	l1098
   408  0008A4  EF5F  F004         	goto	l1006
   409  0008A8                     l1098:
   410                           
   411                           ; Switch size 1, requested type "simple"
   412                           ; Number of cases is 2, Range of values is 1 to 2
   413                           ; switch strategies available:
   414                           ; Name         Instructions Cycles
   415                           ; simple_byte            7     4 (average)
   416                           ;	Chosen strategy is simple_byte
   417  0008A8  5009               	movf	??_DisplayLCD_Out^0,w,c
   418  0008AA  0A01               	xorlw	1	; case 1
   419  0008AC  B4D8               	btfsc	status,2,c
   420  0008AE  EF36  F004         	goto	l994
   421  0008B2  0A03               	xorlw	3	; case 2
   422  0008B4  B4D8               	btfsc	status,2,c
   423  0008B6  EF40  F004         	goto	l998
   424  0008BA  EF5F  F004         	goto	l1006
   425  0008BE                     l1006:
   426                           
   427                           ;main.c: 308:  DisplayLCD_Out_Cp(TextoLCD);
   428  0008BE  C007  F004         	movff	DisplayLCD_Out@TextoLCD,DisplayLCD_Out_Cp@Ponteiro
   429  0008C2  C008  F005         	movff	DisplayLCD_Out@TextoLCD+1,DisplayLCD_Out_Cp@Ponteiro+1
   430  0008C6  EC96  F004         	call	_DisplayLCD_Out_Cp	;wreg free
   431  0008CA  0012               	return		;funcret
   432  0008CC                     __end_of_DisplayLCD_Out:
   433                           	callstack 0
   434                           
   435 ;; *************** function _DisplayLCD_Out_Cp *****************
   436 ;; Defined at:
   437 ;;		line 316 in file "main.c"
   438 ;; Parameters:    Size  Location     Type
   439 ;;  Ponteiro        2    3[COMRAM] PTR unsigned char 
   440 ;;		 -> STR_2(13), STR_1(16), 
   441 ;; Auto vars:     Size  Location     Type
   442 ;;		None
   443 ;; Return value:  Size  Location     Type
   444 ;;                  1    wreg      void 
   445 ;; Registers used:
   446 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   447 ;; Tracked objects:
   448 ;;		On entry : 0/0
   449 ;;		On exit  : 0/0
   450 ;;		Unchanged: 0/0
   451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   452 ;;      Params:         2       0       0       0       0       0       0
   453 ;;      Locals:         0       0       0       0       0       0       0
   454 ;;      Temps:          0       0       0       0       0       0       0
   455 ;;      Totals:         2       0       0       0       0       0       0
   456 ;;Total ram usage:        2 bytes
   457 ;; Hardware stack levels used: 1
   458 ;; Hardware stack levels required when called: 2
   459 ;; This function calls:
   460 ;;		_LCD_Write_Data
   461 ;; This function is called by:
   462 ;;		_DisplayLCD_Out
   463 ;; This function uses a non-reentrant model
   464 ;;
   465                           
   466                           	psect	text2
   467  00092C                     __ptext2:
   468                           	callstack 0
   469  00092C                     _DisplayLCD_Out_Cp:
   470                           	callstack 27
   471  00092C                     
   472                           ;main.c: 316: void DisplayLCD_Out_Cp(unsigned char *Ponteiro);main.c: 317: {;main.c: 319
      +                          :  while (*Ponteiro)
   473  00092C  EFA4  F004         	goto	l960
   474  000930                     l956:
   475                           
   476                           ;main.c: 320:  {;main.c: 321:   LCD_Write_Data(1, *Ponteiro);
   477  000930  C004  FFF6         	movff	DisplayLCD_Out_Cp@Ponteiro,tblptrl
   478  000934  C005  FFF7         	movff	DisplayLCD_Out_Cp@Ponteiro+1,tblptrh
   479  000938                     	if	0	;tblptru may be non-zero
   480  000938                     	endif
   481  000938                     	if	0	;tblptru may be non-zero
   482  000938                     	endif
   483  000938  0008               	tblrd		*
   484  00093A  CFF5 F001          	movff	tablat,LCD_Write_Data@Data
   485  00093E  0E01               	movlw	1
   486  000940  EC10  F003         	call	_LCD_Write_Data
   487  000944                     
   488                           ;main.c: 323:   ++Ponteiro;
   489  000944  4A04               	infsnz	DisplayLCD_Out_Cp@Ponteiro^0,f,c
   490  000946  2A05               	incf	(DisplayLCD_Out_Cp@Ponteiro+1)^0,f,c
   491  000948                     l960:
   492                           
   493                           ;main.c: 319:  while (*Ponteiro)
   494  000948  C004  FFF6         	movff	DisplayLCD_Out_Cp@Ponteiro,tblptrl
   495  00094C  C005  FFF7         	movff	DisplayLCD_Out_Cp@Ponteiro+1,tblptrh
   496  000950                     	if	0	;tblptru may be non-zero
   497  000950                     	endif
   498  000950                     	if	0	;tblptru may be non-zero
   499  000950                     	endif
   500  000950  0008               	tblrd		*
   501  000952  50F5               	movf	tablat,w,c
   502  000954  0900               	iorlw	0
   503  000956  A4D8               	btfss	status,2,c
   504  000958  EFB0  F004         	goto	u361
   505  00095C  EFB2  F004         	goto	u360
   506  000960                     u361:
   507  000960  EF98  F004         	goto	l956
   508  000964                     u360:
   509  000964  0012               	return		;funcret
   510  000966                     __end_of_DisplayLCD_Out_Cp:
   511                           	callstack 0
   512                           
   513 ;; *************** function _DisplayLCD_Init *****************
   514 ;; Defined at:
   515 ;;		line 247 in file "main.c"
   516 ;; Parameters:    Size  Location     Type
   517 ;;		None
   518 ;; Auto vars:     Size  Location     Type
   519 ;;		None
   520 ;; Return value:  Size  Location     Type
   521 ;;                  1    wreg      void 
   522 ;; Registers used:
   523 ;;		wreg, status,2, status,0, cstack
   524 ;; Tracked objects:
   525 ;;		On entry : 0/0
   526 ;;		On exit  : 0/0
   527 ;;		Unchanged: 0/0
   528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   529 ;;      Params:         0       0       0       0       0       0       0
   530 ;;      Locals:         0       0       0       0       0       0       0
   531 ;;      Temps:          2       0       0       0       0       0       0
   532 ;;      Totals:         2       0       0       0       0       0       0
   533 ;;Total ram usage:        2 bytes
   534 ;; Hardware stack levels used: 1
   535 ;; Hardware stack levels required when called: 3
   536 ;; This function calls:
   537 ;;		_DisplayLCD_Cmd
   538 ;;		_LCD_Enable
   539 ;; This function is called by:
   540 ;;		_main
   541 ;; This function uses a non-reentrant model
   542 ;;
   543                           
   544                           	psect	text3
   545  00075C                     __ptext3:
   546                           	callstack 0
   547  00075C                     _DisplayLCD_Init:
   548                           	callstack 27
   549  00075C                     
   550                           ;main.c: 249:  TRISDbits.RD4 = 0;
   551  00075C  9895               	bcf	149,4,c	;volatile
   552                           
   553                           ;main.c: 250:  LATDbits.LATD4 = 0;
   554  00075E  988C               	bcf	140,4,c	;volatile
   555                           
   556                           ;main.c: 251:  TRISDbits.RD5 = 0;
   557  000760  9A95               	bcf	149,5,c	;volatile
   558                           
   559                           ;main.c: 252:  LATDbits.LATD5 = 0;
   560  000762  9A8C               	bcf	140,5,c	;volatile
   561                           
   562                           ;main.c: 253:  TRISDbits.RD6 = 0;
   563  000764  9C95               	bcf	149,6,c	;volatile
   564                           
   565                           ;main.c: 254:  LATDbits.LATD6 = 0;
   566  000766  9C8C               	bcf	140,6,c	;volatile
   567                           
   568                           ;main.c: 255:  TRISDbits.RD7 = 0;
   569  000768  9E95               	bcf	149,7,c	;volatile
   570                           
   571                           ;main.c: 256:  LATDbits.LATD7 = 0;
   572  00076A  9E8C               	bcf	140,7,c	;volatile
   573                           
   574                           ;main.c: 257:  TRISEbits.TRISE1 = 0;
   575  00076C  9296               	bcf	150,1,c	;volatile
   576                           
   577                           ;main.c: 258:  LATEbits.LATE2 = 0;
   578  00076E  948D               	bcf	141,2,c	;volatile
   579                           
   580                           ;main.c: 259:  TRISEbits.TRISE2 = 0;
   581  000770  9496               	bcf	150,2,c	;volatile
   582                           
   583                           ;main.c: 260:  LATEbits.LATE2 = 0;
   584  000772  948D               	bcf	141,2,c	;volatile
   585  000774                     
   586                           ;main.c: 262:  _delay((unsigned long)((100)*(8000000/4000.0)));
   587  000774  0E02               	movlw	2
   588  000776  6E06               	movwf	(??_DisplayLCD_Init+1)^0,c
   589  000778  0E04               	movlw	4
   590  00077A  6E05               	movwf	??_DisplayLCD_Init^0,c
   591  00077C  0EBA               	movlw	186
   592  00077E                     u397:
   593  00077E  2EE8               	decfsz	wreg,f,c
   594  000780  D7FE               	bra	u397
   595  000782  2E05               	decfsz	??_DisplayLCD_Init^0,f,c
   596  000784  D7FC               	bra	u397
   597  000786  2E06               	decfsz	(??_DisplayLCD_Init+1)^0,f,c
   598  000788  D7FA               	bra	u397
   599  00078A  D000               	nop2	
   600  00078C                     
   601                           ;main.c: 264:  LATDbits.LATD4 = 1;
   602  00078C  888C               	bsf	140,4,c	;volatile
   603  00078E                     
   604                           ;main.c: 265:  LATDbits.LATD5 = 1;
   605  00078E  8A8C               	bsf	140,5,c	;volatile
   606  000790                     
   607                           ;main.c: 266:  LCD_Enable();
   608  000790  ECB3  F004         	call	_LCD_Enable	;wreg free
   609  000794                     
   610                           ;main.c: 267:  LCD_Enable();
   611  000794  ECB3  F004         	call	_LCD_Enable	;wreg free
   612  000798                     
   613                           ;main.c: 268:  LCD_Enable();
   614  000798  ECB3  F004         	call	_LCD_Enable	;wreg free
   615  00079C                     
   616                           ;main.c: 270:  _delay((unsigned long)((1)*(8000000/4000.0)));
   617  00079C  0E03               	movlw	3
   618  00079E  6E05               	movwf	??_DisplayLCD_Init^0,c
   619  0007A0  0E98               	movlw	152
   620  0007A2                     u407:
   621  0007A2  2EE8               	decfsz	wreg,f,c
   622  0007A4  D7FE               	bra	u407
   623  0007A6  2E05               	decfsz	??_DisplayLCD_Init^0,f,c
   624  0007A8  D7FC               	bra	u407
   625  0007AA                     
   626                           ;main.c: 272:  LATDbits.LATD4 = 0;
   627  0007AA  988C               	bcf	140,4,c	;volatile
   628  0007AC                     
   629                           ;main.c: 273:  LATDbits.LATD5 = 1;
   630  0007AC  8A8C               	bsf	140,5,c	;volatile
   631                           
   632                           ;main.c: 274:  LCD_Enable();
   633  0007AE  ECB3  F004         	call	_LCD_Enable	;wreg free
   634                           
   635                           ;main.c: 275:  LCD_Enable();
   636  0007B2  ECB3  F004         	call	_LCD_Enable	;wreg free
   637                           
   638                           ;main.c: 276:  LCD_Enable();
   639  0007B6  ECB3  F004         	call	_LCD_Enable	;wreg free
   640  0007BA                     
   641                           ;main.c: 278:  _delay((unsigned long)((1)*(8000000/4000.0)));
   642  0007BA  0E03               	movlw	3
   643  0007BC  6E05               	movwf	??_DisplayLCD_Init^0,c
   644  0007BE  0E98               	movlw	152
   645  0007C0                     u417:
   646  0007C0  2EE8               	decfsz	wreg,f,c
   647  0007C2  D7FE               	bra	u417
   648  0007C4  2E05               	decfsz	??_DisplayLCD_Init^0,f,c
   649  0007C6  D7FC               	bra	u417
   650  0007C8                     
   651                           ;main.c: 280:  DisplayLCD_Cmd(0X28);
   652  0007C8  0E28               	movlw	40
   653  0007CA  ECC2  F004         	call	_DisplayLCD_Cmd
   654  0007CE                     
   655                           ;main.c: 281:  DisplayLCD_Cmd(0X0C);
   656  0007CE  0E0C               	movlw	12
   657  0007D0  ECC2  F004         	call	_DisplayLCD_Cmd
   658  0007D4                     
   659                           ;main.c: 282:  DisplayLCD_Cmd(0X06);
   660  0007D4  0E06               	movlw	6
   661  0007D6  ECC2  F004         	call	_DisplayLCD_Cmd
   662  0007DA                     
   663                           ;main.c: 283:  DisplayLCD_Cmd(0X01);
   664  0007DA  0E01               	movlw	1
   665  0007DC  ECC2  F004         	call	_DisplayLCD_Cmd
   666  0007E0  0012               	return		;funcret
   667  0007E2                     __end_of_DisplayLCD_Init:
   668                           	callstack 0
   669                           
   670 ;; *************** function _DisplayLCD_Cmd *****************
   671 ;; Defined at:
   672 ;;		line 236 in file "main.c"
   673 ;; Parameters:    Size  Location     Type
   674 ;;  CmdLCD          1    wreg     unsigned char 
   675 ;; Auto vars:     Size  Location     Type
   676 ;;  CmdLCD          1    3[COMRAM] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  1    wreg      void 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0, cstack
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   686 ;;      Params:         0       0       0       0       0       0       0
   687 ;;      Locals:         1       0       0       0       0       0       0
   688 ;;      Temps:          0       0       0       0       0       0       0
   689 ;;      Totals:         1       0       0       0       0       0       0
   690 ;;Total ram usage:        1 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 2
   693 ;; This function calls:
   694 ;;		_LCD_Write_Data
   695 ;; This function is called by:
   696 ;;		_DisplayLCD_Init
   697 ;;		_main
   698 ;; This function uses a non-reentrant model
   699 ;;
   700                           
   701                           	psect	text4
   702  000984                     __ptext4:
   703                           	callstack 0
   704  000984                     _DisplayLCD_Cmd:
   705                           	callstack 27
   706                           
   707                           ;incstack = 0
   708                           ;DisplayLCD_Cmd@CmdLCD stored from wreg
   709  000984  6E04               	movwf	DisplayLCD_Cmd@CmdLCD^0,c
   710  000986                     
   711                           ;main.c: 236: void DisplayLCD_Cmd(unsigned char CmdLCD);main.c: 237: {;main.c: 238:  LCD
      +                          _Write_Data(0, CmdLCD);
   712  000986  C004  F001         	movff	DisplayLCD_Cmd@CmdLCD,LCD_Write_Data@Data
   713  00098A  0E00               	movlw	0
   714  00098C  EC10  F003         	call	_LCD_Write_Data
   715  000990  0012               	return		;funcret
   716  000992                     __end_of_DisplayLCD_Cmd:
   717                           	callstack 0
   718                           
   719 ;; *************** function _DisplayLCD_Chr *****************
   720 ;; Defined at:
   721 ;;		line 328 in file "main.c"
   722 ;; Parameters:    Size  Location     Type
   723 ;;  Linha           1    wreg     unsigned char 
   724 ;;  Coluna          1    4[COMRAM] unsigned char 
   725 ;;  Tchar           1    5[COMRAM] unsigned char 
   726 ;; Auto vars:     Size  Location     Type
   727 ;;  Linha           1    8[COMRAM] unsigned char 
   728 ;; Return value:  Size  Location     Type
   729 ;;                  1    wreg      void 
   730 ;; Registers used:
   731 ;;		wreg, status,2, status,0, cstack
   732 ;; Tracked objects:
   733 ;;		On entry : 0/0
   734 ;;		On exit  : 0/0
   735 ;;		Unchanged: 0/0
   736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   737 ;;      Params:         2       0       0       0       0       0       0
   738 ;;      Locals:         1       0       0       0       0       0       0
   739 ;;      Temps:          2       0       0       0       0       0       0
   740 ;;      Totals:         5       0       0       0       0       0       0
   741 ;;Total ram usage:        5 bytes
   742 ;; Hardware stack levels used: 1
   743 ;; Hardware stack levels required when called: 3
   744 ;; This function calls:
   745 ;;		_DisplayLCD_Chr_Cp
   746 ;;		_LCD_Write_Data
   747 ;; This function is called by:
   748 ;;		_main
   749 ;; This function uses a non-reentrant model
   750 ;;
   751                           
   752                           	psect	text5
   753  0008CC                     __ptext5:
   754                           	callstack 0
   755  0008CC                     _DisplayLCD_Chr:
   756                           	callstack 27
   757                           
   758                           ;incstack = 0
   759                           ;DisplayLCD_Chr@Linha stored from wreg
   760  0008CC  6E09               	movwf	DisplayLCD_Chr@Linha^0,c
   761  0008CE                     
   762                           ;main.c: 328: void DisplayLCD_Chr(unsigned char Linha, unsigned char Coluna,;main.c: 329
      +                          :      unsigned char Tchar);main.c: 330: {;main.c: 331:  LATEbits.LATE2 = 0;
   763  0008CE  948D               	bcf	141,2,c	;volatile
   764                           
   765                           ;main.c: 332:  switch (Linha)
   766  0008D0  EF7D  F004         	goto	l1024
   767  0008D4                     l1014:
   768                           
   769                           ;main.c: 335:  {;main.c: 336:   Coluna = Coluna + 0x7F;
   770  0008D4  5005               	movf	DisplayLCD_Chr@Coluna^0,w,c
   771  0008D6  0F7F               	addlw	127
   772  0008D8  6E05               	movwf	DisplayLCD_Chr@Coluna^0,c
   773  0008DA                     
   774                           ;main.c: 337:   LCD_Write_Data(0, Coluna);
   775  0008DA  C005  F001         	movff	DisplayLCD_Chr@Coluna,LCD_Write_Data@Data
   776  0008DE  0E00               	movlw	0
   777  0008E0  EC10  F003         	call	_LCD_Write_Data
   778                           
   779                           ;main.c: 339:   break;
   780  0008E4  EF92  F004         	goto	l1026
   781  0008E8                     l1018:
   782                           
   783                           ;main.c: 342:  {;main.c: 343:   Coluna += 0xBF;
   784  0008E8  0EBF               	movlw	191
   785  0008EA  2605               	addwf	DisplayLCD_Chr@Coluna^0,f,c
   786  0008EC                     
   787                           ;main.c: 344:   LCD_Write_Data(0, Coluna);
   788  0008EC  C005  F001         	movff	DisplayLCD_Chr@Coluna,LCD_Write_Data@Data
   789  0008F0  0E00               	movlw	0
   790  0008F2  EC10  F003         	call	_LCD_Write_Data
   791                           
   792                           ;main.c: 346:   break;
   793  0008F6  EF92  F004         	goto	l1026
   794  0008FA                     l1024:
   795  0008FA  5009               	movf	DisplayLCD_Chr@Linha^0,w,c
   796  0008FC  6E07               	movwf	??_DisplayLCD_Chr^0,c
   797  0008FE  6A08               	clrf	(??_DisplayLCD_Chr+1)^0,c
   798                           
   799                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
   800                           ; Switch size 1, requested type "simple"
   801                           ; Number of cases is 1, Range of values is 0 to 0
   802                           ; switch strategies available:
   803                           ; Name         Instructions Cycles
   804                           ; simple_byte            4     3 (average)
   805                           ;	Chosen strategy is simple_byte
   806  000900  5008               	movf	(??_DisplayLCD_Chr+1)^0,w,c
   807  000902  0A00               	xorlw	0	; case 0
   808  000904  B4D8               	btfsc	status,2,c
   809  000906  EF87  F004         	goto	l1100
   810  00090A  EF92  F004         	goto	l1026
   811  00090E                     l1100:
   812                           
   813                           ; Switch size 1, requested type "simple"
   814                           ; Number of cases is 2, Range of values is 1 to 2
   815                           ; switch strategies available:
   816                           ; Name         Instructions Cycles
   817                           ; simple_byte            7     4 (average)
   818                           ;	Chosen strategy is simple_byte
   819  00090E  5007               	movf	??_DisplayLCD_Chr^0,w,c
   820  000910  0A01               	xorlw	1	; case 1
   821  000912  B4D8               	btfsc	status,2,c
   822  000914  EF6A  F004         	goto	l1014
   823  000918  0A03               	xorlw	3	; case 2
   824  00091A  B4D8               	btfsc	status,2,c
   825  00091C  EF74  F004         	goto	l1018
   826  000920  EF92  F004         	goto	l1026
   827  000924                     l1026:
   828                           
   829                           ;main.c: 349:  DisplayLCD_Chr_Cp(Tchar);
   830  000924  5006               	movf	DisplayLCD_Chr@Tchar^0,w,c
   831  000926  ECC9  F004         	call	_DisplayLCD_Chr_Cp
   832  00092A  0012               	return		;funcret
   833  00092C                     __end_of_DisplayLCD_Chr:
   834                           	callstack 0
   835                           
   836 ;; *************** function _DisplayLCD_Chr_Cp *****************
   837 ;; Defined at:
   838 ;;		line 241 in file "main.c"
   839 ;; Parameters:    Size  Location     Type
   840 ;;  Tchar           1    wreg     unsigned char 
   841 ;; Auto vars:     Size  Location     Type
   842 ;;  Tchar           1    3[COMRAM] unsigned char 
   843 ;; Return value:  Size  Location     Type
   844 ;;                  1    wreg      void 
   845 ;; Registers used:
   846 ;;		wreg, status,2, status,0, cstack
   847 ;; Tracked objects:
   848 ;;		On entry : 0/0
   849 ;;		On exit  : 0/0
   850 ;;		Unchanged: 0/0
   851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   852 ;;      Params:         0       0       0       0       0       0       0
   853 ;;      Locals:         1       0       0       0       0       0       0
   854 ;;      Temps:          0       0       0       0       0       0       0
   855 ;;      Totals:         1       0       0       0       0       0       0
   856 ;;Total ram usage:        1 bytes
   857 ;; Hardware stack levels used: 1
   858 ;; Hardware stack levels required when called: 2
   859 ;; This function calls:
   860 ;;		_LCD_Write_Data
   861 ;; This function is called by:
   862 ;;		_DisplayLCD_Chr
   863 ;;		_main
   864 ;; This function uses a non-reentrant model
   865 ;;
   866                           
   867                           	psect	text6
   868  000992                     __ptext6:
   869                           	callstack 0
   870  000992                     _DisplayLCD_Chr_Cp:
   871                           	callstack 28
   872                           
   873                           ;incstack = 0
   874                           ;DisplayLCD_Chr_Cp@Tchar stored from wreg
   875  000992  6E04               	movwf	DisplayLCD_Chr_Cp@Tchar^0,c
   876  000994                     
   877                           ;main.c: 241: void DisplayLCD_Chr_Cp(unsigned char Tchar);main.c: 242: {;main.c: 243:  L
      +                          CD_Write_Data(1, Tchar);
   878  000994  C004  F001         	movff	DisplayLCD_Chr_Cp@Tchar,LCD_Write_Data@Data
   879  000998  0E01               	movlw	1
   880  00099A  EC10  F003         	call	_LCD_Write_Data
   881  00099E  0012               	return		;funcret
   882  0009A0                     __end_of_DisplayLCD_Chr_Cp:
   883                           	callstack 0
   884                           
   885 ;; *************** function _LCD_Write_Data *****************
   886 ;; Defined at:
   887 ;;		line 194 in file "main.c"
   888 ;; Parameters:    Size  Location     Type
   889 ;;  RS              1    wreg     unsigned char 
   890 ;;  Data            1    0[COMRAM] unsigned char 
   891 ;; Auto vars:     Size  Location     Type
   892 ;;  RS              1    2[COMRAM] unsigned char 
   893 ;; Return value:  Size  Location     Type
   894 ;;                  1    wreg      void 
   895 ;; Registers used:
   896 ;;		wreg, status,2, status,0, cstack
   897 ;; Tracked objects:
   898 ;;		On entry : 0/0
   899 ;;		On exit  : 0/0
   900 ;;		Unchanged: 0/0
   901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   902 ;;      Params:         1       0       0       0       0       0       0
   903 ;;      Locals:         1       0       0       0       0       0       0
   904 ;;      Temps:          1       0       0       0       0       0       0
   905 ;;      Totals:         3       0       0       0       0       0       0
   906 ;;Total ram usage:        3 bytes
   907 ;; Hardware stack levels used: 1
   908 ;; Hardware stack levels required when called: 1
   909 ;; This function calls:
   910 ;;		_LCD_Enable
   911 ;; This function is called by:
   912 ;;		_DisplayLCD_Cmd
   913 ;;		_DisplayLCD_Chr_Cp
   914 ;;		_DisplayLCD_Out
   915 ;;		_DisplayLCD_Out_Cp
   916 ;;		_DisplayLCD_Chr
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text7
   921  000620                     __ptext7:
   922                           	callstack 0
   923  000620                     _LCD_Write_Data:
   924                           	callstack 28
   925                           
   926                           ;incstack = 0
   927                           ;LCD_Write_Data@RS stored from wreg
   928  000620  6E03               	movwf	LCD_Write_Data@RS^0,c
   929  000622                     
   930                           ;main.c: 194: void LCD_Write_Data(unsigned char RS, unsigned char Data);main.c: 195: {;m
      +                          ain.c: 208:  LATEbits.LATE2 = RS;
   931  000622  B003               	btfsc	LCD_Write_Data@RS^0,0,c
   932  000624  D002               	bra	u195
   933  000626  948D               	bcf	141,2,c	;volatile
   934  000628  D001               	bra	u196
   935  00062A                     u195:
   936  00062A  848D               	bsf	141,2,c	;volatile
   937  00062C                     u196:
   938  00062C                     
   939                           ;main.c: 210:  _delay((unsigned long)((2)*(8000000/4000.0)));
   940  00062C  0E06               	movlw	6
   941  00062E  6E02               	movwf	??_LCD_Write_Data^0,c
   942  000630  0E30               	movlw	48
   943  000632                     u427:
   944  000632  2EE8               	decfsz	wreg,f,c
   945  000634  D7FE               	bra	u427
   946  000636  2E02               	decfsz	??_LCD_Write_Data^0,f,c
   947  000638  D7FC               	bra	u427
   948  00063A  D000               	nop2	
   949  00063C                     
   950                           ;main.c: 211:  LATDbits.LATD4 = ((Data & 0x10) == 0x10);
   951  00063C  B801               	btfsc	LCD_Write_Data@Data^0,4,c
   952  00063E  EF23  F003         	goto	u201
   953  000642  EF27  F003         	goto	u200
   954  000646                     u201:
   955  000646  6A02               	clrf	??_LCD_Write_Data^0,c
   956  000648  2A02               	incf	??_LCD_Write_Data^0,f,c
   957  00064A  EF28  F003         	goto	u218
   958  00064E                     u200:
   959  00064E  6A02               	clrf	??_LCD_Write_Data^0,c
   960  000650                     u218:
   961  000650  3A02               	swapf	??_LCD_Write_Data^0,f,c
   962  000652  508C               	movf	140,w,c	;volatile
   963  000654  1802               	xorwf	??_LCD_Write_Data^0,w,c
   964  000656  0BEF               	andlw	-17
   965  000658  1802               	xorwf	??_LCD_Write_Data^0,w,c
   966  00065A  6E8C               	movwf	140,c	;volatile
   967  00065C                     
   968                           ;main.c: 212:  LATDbits.LATD5 = ((Data & 0x20) == 0x20);
   969  00065C  BA01               	btfsc	LCD_Write_Data@Data^0,5,c
   970  00065E  EF33  F003         	goto	u221
   971  000662  EF37  F003         	goto	u220
   972  000666                     u221:
   973  000666  6A02               	clrf	??_LCD_Write_Data^0,c
   974  000668  2A02               	incf	??_LCD_Write_Data^0,f,c
   975  00066A  EF38  F003         	goto	u238
   976  00066E                     u220:
   977  00066E  6A02               	clrf	??_LCD_Write_Data^0,c
   978  000670                     u238:
   979  000670  3A02               	swapf	??_LCD_Write_Data^0,f,c
   980  000672  4602               	rlncf	??_LCD_Write_Data^0,f,c
   981  000674  508C               	movf	140,w,c	;volatile
   982  000676  1802               	xorwf	??_LCD_Write_Data^0,w,c
   983  000678  0BDF               	andlw	-33
   984  00067A  1802               	xorwf	??_LCD_Write_Data^0,w,c
   985  00067C  6E8C               	movwf	140,c	;volatile
   986  00067E                     
   987                           ;main.c: 213:  LATDbits.LATD6 = ((Data & 0x40) == 0x40);
   988  00067E  BC01               	btfsc	LCD_Write_Data@Data^0,6,c
   989  000680  EF44  F003         	goto	u241
   990  000684  EF48  F003         	goto	u240
   991  000688                     u241:
   992  000688  6A02               	clrf	??_LCD_Write_Data^0,c
   993  00068A  2A02               	incf	??_LCD_Write_Data^0,f,c
   994  00068C  EF49  F003         	goto	u258
   995  000690                     u240:
   996  000690  6A02               	clrf	??_LCD_Write_Data^0,c
   997  000692                     u258:
   998  000692  3A02               	swapf	??_LCD_Write_Data^0,f,c
   999  000694  4602               	rlncf	??_LCD_Write_Data^0,f,c
  1000  000696  4602               	rlncf	??_LCD_Write_Data^0,f,c
  1001  000698  508C               	movf	140,w,c	;volatile
  1002  00069A  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1003  00069C  0BBF               	andlw	-65
  1004  00069E  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1005  0006A0  6E8C               	movwf	140,c	;volatile
  1006  0006A2                     
  1007                           ;main.c: 214:  LATDbits.LATD7 = ((Data & 0x80) == 0x80);
  1008  0006A2  BE01               	btfsc	LCD_Write_Data@Data^0,7,c
  1009  0006A4  EF56  F003         	goto	u261
  1010  0006A8  EF5A  F003         	goto	u260
  1011  0006AC                     u261:
  1012  0006AC  6A02               	clrf	??_LCD_Write_Data^0,c
  1013  0006AE  2A02               	incf	??_LCD_Write_Data^0,f,c
  1014  0006B0  EF5B  F003         	goto	u278
  1015  0006B4                     u260:
  1016  0006B4  6A02               	clrf	??_LCD_Write_Data^0,c
  1017  0006B6                     u278:
  1018  0006B6  3202               	rrcf	??_LCD_Write_Data^0,f,c
  1019  0006B8  3202               	rrcf	??_LCD_Write_Data^0,f,c
  1020  0006BA  508C               	movf	140,w,c	;volatile
  1021  0006BC  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1022  0006BE  0B7F               	andlw	-129
  1023  0006C0  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1024  0006C2  6E8C               	movwf	140,c	;volatile
  1025  0006C4                     
  1026                           ;main.c: 216:  LCD_Enable();
  1027  0006C4  ECB3  F004         	call	_LCD_Enable	;wreg free
  1028  0006C8                     
  1029                           ;main.c: 218:  Data = Data << 4;
  1030  0006C8  3801               	swapf	LCD_Write_Data@Data^0,w,c
  1031  0006CA  0BF0               	andlw	240
  1032  0006CC  6E01               	movwf	LCD_Write_Data@Data^0,c
  1033  0006CE                     
  1034                           ;main.c: 219:  LATDbits.LATD4 = ((Data & 0x10) == 0x10);
  1035  0006CE  B801               	btfsc	LCD_Write_Data@Data^0,4,c
  1036  0006D0  EF6C  F003         	goto	u281
  1037  0006D4  EF70  F003         	goto	u280
  1038  0006D8                     u281:
  1039  0006D8  6A02               	clrf	??_LCD_Write_Data^0,c
  1040  0006DA  2A02               	incf	??_LCD_Write_Data^0,f,c
  1041  0006DC  EF71  F003         	goto	u298
  1042  0006E0                     u280:
  1043  0006E0  6A02               	clrf	??_LCD_Write_Data^0,c
  1044  0006E2                     u298:
  1045  0006E2  3A02               	swapf	??_LCD_Write_Data^0,f,c
  1046  0006E4  508C               	movf	140,w,c	;volatile
  1047  0006E6  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1048  0006E8  0BEF               	andlw	-17
  1049  0006EA  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1050  0006EC  6E8C               	movwf	140,c	;volatile
  1051  0006EE                     
  1052                           ;main.c: 220:  LATDbits.LATD5 = ((Data & 0x20) == 0x20);
  1053  0006EE  BA01               	btfsc	LCD_Write_Data@Data^0,5,c
  1054  0006F0  EF7C  F003         	goto	u301
  1055  0006F4  EF80  F003         	goto	u300
  1056  0006F8                     u301:
  1057  0006F8  6A02               	clrf	??_LCD_Write_Data^0,c
  1058  0006FA  2A02               	incf	??_LCD_Write_Data^0,f,c
  1059  0006FC  EF81  F003         	goto	u318
  1060  000700                     u300:
  1061  000700  6A02               	clrf	??_LCD_Write_Data^0,c
  1062  000702                     u318:
  1063  000702  3A02               	swapf	??_LCD_Write_Data^0,f,c
  1064  000704  4602               	rlncf	??_LCD_Write_Data^0,f,c
  1065  000706  508C               	movf	140,w,c	;volatile
  1066  000708  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1067  00070A  0BDF               	andlw	-33
  1068  00070C  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1069  00070E  6E8C               	movwf	140,c	;volatile
  1070  000710                     
  1071                           ;main.c: 221:  LATDbits.LATD6 = ((Data & 0x40) == 0x40);
  1072  000710  BC01               	btfsc	LCD_Write_Data@Data^0,6,c
  1073  000712  EF8D  F003         	goto	u321
  1074  000716  EF91  F003         	goto	u320
  1075  00071A                     u321:
  1076  00071A  6A02               	clrf	??_LCD_Write_Data^0,c
  1077  00071C  2A02               	incf	??_LCD_Write_Data^0,f,c
  1078  00071E  EF92  F003         	goto	u338
  1079  000722                     u320:
  1080  000722  6A02               	clrf	??_LCD_Write_Data^0,c
  1081  000724                     u338:
  1082  000724  3A02               	swapf	??_LCD_Write_Data^0,f,c
  1083  000726  4602               	rlncf	??_LCD_Write_Data^0,f,c
  1084  000728  4602               	rlncf	??_LCD_Write_Data^0,f,c
  1085  00072A  508C               	movf	140,w,c	;volatile
  1086  00072C  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1087  00072E  0BBF               	andlw	-65
  1088  000730  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1089  000732  6E8C               	movwf	140,c	;volatile
  1090  000734                     
  1091                           ;main.c: 222:  LATDbits.LATD7 = ((Data & 0x80) == 0x80);
  1092  000734  BE01               	btfsc	LCD_Write_Data@Data^0,7,c
  1093  000736  EF9F  F003         	goto	u341
  1094  00073A  EFA3  F003         	goto	u340
  1095  00073E                     u341:
  1096  00073E  6A02               	clrf	??_LCD_Write_Data^0,c
  1097  000740  2A02               	incf	??_LCD_Write_Data^0,f,c
  1098  000742  EFA4  F003         	goto	u358
  1099  000746                     u340:
  1100  000746  6A02               	clrf	??_LCD_Write_Data^0,c
  1101  000748                     u358:
  1102  000748  3202               	rrcf	??_LCD_Write_Data^0,f,c
  1103  00074A  3202               	rrcf	??_LCD_Write_Data^0,f,c
  1104  00074C  508C               	movf	140,w,c	;volatile
  1105  00074E  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1106  000750  0B7F               	andlw	-129
  1107  000752  1802               	xorwf	??_LCD_Write_Data^0,w,c
  1108  000754  6E8C               	movwf	140,c	;volatile
  1109  000756                     
  1110                           ;main.c: 224:  LCD_Enable();
  1111  000756  ECB3  F004         	call	_LCD_Enable	;wreg free
  1112  00075A  0012               	return		;funcret
  1113  00075C                     __end_of_LCD_Write_Data:
  1114                           	callstack 0
  1115                           
  1116 ;; *************** function _LCD_Enable *****************
  1117 ;; Defined at:
  1118 ;;		line 227 in file "main.c"
  1119 ;; Parameters:    Size  Location     Type
  1120 ;;		None
  1121 ;; Auto vars:     Size  Location     Type
  1122 ;;		None
  1123 ;; Return value:  Size  Location     Type
  1124 ;;                  1    wreg      void 
  1125 ;; Registers used:
  1126 ;;		wreg
  1127 ;; Tracked objects:
  1128 ;;		On entry : 0/0
  1129 ;;		On exit  : 0/0
  1130 ;;		Unchanged: 0/0
  1131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1132 ;;      Params:         0       0       0       0       0       0       0
  1133 ;;      Locals:         0       0       0       0       0       0       0
  1134 ;;      Temps:          0       0       0       0       0       0       0
  1135 ;;      Totals:         0       0       0       0       0       0       0
  1136 ;;Total ram usage:        0 bytes
  1137 ;; Hardware stack levels used: 1
  1138 ;; This function calls:
  1139 ;;		Nothing
  1140 ;; This function is called by:
  1141 ;;		_LCD_Write_Data
  1142 ;;		_DisplayLCD_Init
  1143 ;; This function uses a non-reentrant model
  1144 ;;
  1145                           
  1146                           	psect	text8
  1147  000966                     __ptext8:
  1148                           	callstack 0
  1149  000966                     _LCD_Enable:
  1150                           	callstack 28
  1151  000966                     
  1152                           ;main.c: 229:  _delay((unsigned long)((40)*(8000000/4000000.0)));
  1153  000966  0E1A               	movlw	26
  1154  000968                     u437:
  1155  000968  2EE8               	decfsz	wreg,f,c
  1156  00096A  D7FE               	bra	u437
  1157  00096C  D000               	nop2	
  1158  00096E                     
  1159                           ;main.c: 230:  LATEbits.LATE1 = 1;
  1160  00096E  828D               	bsf	141,1,c	;volatile
  1161                           
  1162                           ;main.c: 231:  _delay((unsigned long)((40)*(8000000/4000000.0)));
  1163  000970  0E1A               	movlw	26
  1164  000972                     u447:
  1165  000972  2EE8               	decfsz	wreg,f,c
  1166  000974  D7FE               	bra	u447
  1167  000976  D000               	nop2	
  1168  000978                     
  1169                           ;main.c: 232:  LATEbits.LATE1 = 0;
  1170  000978  928D               	bcf	141,1,c	;volatile
  1171                           
  1172                           ;main.c: 233:  _delay((unsigned long)((40)*(8000000/4000000.0)));
  1173  00097A  0E1A               	movlw	26
  1174  00097C                     u457:
  1175  00097C  2EE8               	decfsz	wreg,f,c
  1176  00097E  D7FE               	bra	u457
  1177  000980  D000               	nop2	
  1178  000982  0012               	return		;funcret
  1179  000984                     __end_of_LCD_Enable:
  1180                           	callstack 0
  1181                           
  1182 ;; *************** function _ConfigMCU *****************
  1183 ;; Defined at:
  1184 ;;		line 352 in file "main.c"
  1185 ;; Parameters:    Size  Location     Type
  1186 ;;		None
  1187 ;; Auto vars:     Size  Location     Type
  1188 ;;		None
  1189 ;; Return value:  Size  Location     Type
  1190 ;;                  1    wreg      void 
  1191 ;; Registers used:
  1192 ;;		wreg, status,2
  1193 ;; Tracked objects:
  1194 ;;		On entry : 0/0
  1195 ;;		On exit  : 0/0
  1196 ;;		Unchanged: 0/0
  1197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1198 ;;      Params:         0       0       0       0       0       0       0
  1199 ;;      Locals:         0       0       0       0       0       0       0
  1200 ;;      Temps:          0       0       0       0       0       0       0
  1201 ;;      Totals:         0       0       0       0       0       0       0
  1202 ;;Total ram usage:        0 bytes
  1203 ;; Hardware stack levels used: 1
  1204 ;; This function calls:
  1205 ;;		Nothing
  1206 ;; This function is called by:
  1207 ;;		_main
  1208 ;; This function uses a non-reentrant model
  1209 ;;
  1210                           
  1211                           	psect	text9
  1212  0009AA                     __ptext9:
  1213                           	callstack 0
  1214  0009AA                     _ConfigMCU:
  1215                           	callstack 30
  1216  0009AA                     
  1217                           ;main.c: 355:  ANSELB = 0;
  1218  0009AA  0E00               	movlw	0
  1219  0009AC  010F               	movlb	15	; () banked
  1220  0009AE  6F39               	movwf	57,b	;volatile
  1221  0009B0                     
  1222                           ; BSR set to: 15
  1223  0009B0  0012               	return		;funcret
  1224  0009B2                     __end_of_ConfigMCU:
  1225                           	callstack 0
  1226                           
  1227                           	psect	rparam
  1228  0000                     
  1229                           	psect	idloc
  1230                           
  1231                           ;Config register IDLOC0 @ 0x200000
  1232                           ;	unspecified, using default values
  1233  200000                     	org	2097152
  1234  200000  FF                 	db	255
  1235                           
  1236                           ;Config register IDLOC1 @ 0x200001
  1237                           ;	unspecified, using default values
  1238  200001                     	org	2097153
  1239  200001  FF                 	db	255
  1240                           
  1241                           ;Config register IDLOC2 @ 0x200002
  1242                           ;	unspecified, using default values
  1243  200002                     	org	2097154
  1244  200002  FF                 	db	255
  1245                           
  1246                           ;Config register IDLOC3 @ 0x200003
  1247                           ;	unspecified, using default values
  1248  200003                     	org	2097155
  1249  200003  FF                 	db	255
  1250                           
  1251                           ;Config register IDLOC4 @ 0x200004
  1252                           ;	unspecified, using default values
  1253  200004                     	org	2097156
  1254  200004  FF                 	db	255
  1255                           
  1256                           ;Config register IDLOC5 @ 0x200005
  1257                           ;	unspecified, using default values
  1258  200005                     	org	2097157
  1259  200005  FF                 	db	255
  1260                           
  1261                           ;Config register IDLOC6 @ 0x200006
  1262                           ;	unspecified, using default values
  1263  200006                     	org	2097158
  1264  200006  FF                 	db	255
  1265                           
  1266                           ;Config register IDLOC7 @ 0x200007
  1267                           ;	unspecified, using default values
  1268  200007                     	org	2097159
  1269  200007  FF                 	db	255
  1270                           
  1271                           	psect	config
  1272                           
  1273                           ; Padding undefined space
  1274  300000                     	org	3145728
  1275  300000  FF                 	db	255
  1276                           
  1277                           ;Config register CONFIG1H @ 0x300001
  1278                           ;	Oscillator Selection bits
  1279                           ;	FOSC = HSHP, HS oscillator (high power > 16 MHz)
  1280                           ;	4X PLL Enable
  1281                           ;	PLLCFG = OFF, Oscillator used directly
  1282                           ;	Primary clock enable bit
  1283                           ;	PRICLKEN = ON, Primary clock is always enabled
  1284                           ;	Fail-Safe Clock Monitor Enable bit
  1285                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  1286                           ;	Internal/External Oscillator Switchover bit
  1287                           ;	IESO = OFF, Oscillator Switchover mode disabled
  1288  300001                     	org	3145729
  1289  300001  22                 	db	34
  1290                           
  1291                           ;Config register CONFIG2L @ 0x300002
  1292                           ;	Power-up Timer Enable bit
  1293                           ;	PWRTEN = OFF, Power up timer disabled
  1294                           ;	Brown-out Reset Enable bits
  1295                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  1296                           ;	Brown Out Reset Voltage bits
  1297                           ;	BORV = 190, VBOR set to 1.90 V nominal
  1298  300002                     	org	3145730
  1299  300002  1F                 	db	31
  1300                           
  1301                           ;Config register CONFIG2H @ 0x300003
  1302                           ;	Watchdog Timer Enable bits
  1303                           ;	WDTEN = ON, WDT is always enabled. SWDTEN bit has no effect
  1304                           ;	Watchdog Timer Postscale Select bits
  1305                           ;	WDTPS = 32768, 1:32768
  1306  300003                     	org	3145731
  1307  300003  3F                 	db	63
  1308                           
  1309                           ; Padding undefined space
  1310  300004                     	org	3145732
  1311  300004  FF                 	db	255
  1312                           
  1313                           ;Config register CONFIG3H @ 0x300005
  1314                           ;	CCP2 MUX bit
  1315                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  1316                           ;	PORTB A/D Enable bit
  1317                           ;	PBADEN = ON, PORTB<5:0> pins are configured as analog input channels on Reset
  1318                           ;	P3A/CCP3 Mux bit
  1319                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  1320                           ;	HFINTOSC Fast Start-up
  1321                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  1322                           ;	Timer3 Clock input mux bit
  1323                           ;	T3CMX = PORTC0, T3CKI is on RC0
  1324                           ;	ECCP2 B output mux bit
  1325                           ;	P2BMX = PORTD2, P2B is on RD2
  1326                           ;	MCLR Pin Enable bit
  1327                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  1328  300005                     	org	3145733
  1329  300005  BF                 	db	191
  1330                           
  1331                           ;Config register CONFIG4L @ 0x300006
  1332                           ;	Stack Full/Underflow Reset Enable bit
  1333                           ;	STVREN = ON, Stack full/underflow will cause Reset
  1334                           ;	Single-Supply ICSP Enable bit
  1335                           ;	LVP = ON, Single-Supply ICSP enabled if MCLRE is also 1
  1336                           ;	Extended Instruction Set Enable bit
  1337                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  1338                           ;	Background Debug
  1339                           ;	DEBUG = 0x1, unprogrammed default
  1340  300006                     	org	3145734
  1341  300006  85                 	db	133
  1342                           
  1343                           ; Padding undefined space
  1344  300007                     	org	3145735
  1345  300007  FF                 	db	255
  1346                           
  1347                           ;Config register CONFIG5L @ 0x300008
  1348                           ;	Code Protection Block 0
  1349                           ;	CP0 = OFF, Block 0 (000800-001FFFh) not code-protected
  1350                           ;	Code Protection Block 1
  1351                           ;	CP1 = OFF, Block 1 (002000-003FFFh) not code-protected
  1352                           ;	Code Protection Block 2
  1353                           ;	CP2 = OFF, Block 2 (004000-005FFFh) not code-protected
  1354                           ;	Code Protection Block 3
  1355                           ;	CP3 = OFF, Block 3 (006000-007FFFh) not code-protected
  1356  300008                     	org	3145736
  1357  300008  0F                 	db	15
  1358                           
  1359                           ;Config register CONFIG5H @ 0x300009
  1360                           ;	Boot Block Code Protection bit
  1361                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  1362                           ;	Data EEPROM Code Protection bit
  1363                           ;	CPD = OFF, Data EEPROM not code-protected
  1364  300009                     	org	3145737
  1365  300009  C0                 	db	192
  1366                           
  1367                           ;Config register CONFIG6L @ 0x30000A
  1368                           ;	Write Protection Block 0
  1369                           ;	WRT0 = OFF, Block 0 (000800-001FFFh) not write-protected
  1370                           ;	Write Protection Block 1
  1371                           ;	WRT1 = OFF, Block 1 (002000-003FFFh) not write-protected
  1372                           ;	Write Protection Block 2
  1373                           ;	WRT2 = OFF, Block 2 (004000-005FFFh) not write-protected
  1374                           ;	Write Protection Block 3
  1375                           ;	WRT3 = OFF, Block 3 (006000-007FFFh) not write-protected
  1376  30000A                     	org	3145738
  1377  30000A  0F                 	db	15
  1378                           
  1379                           ;Config register CONFIG6H @ 0x30000B
  1380                           ;	Configuration Register Write Protection bit
  1381                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  1382                           ;	Boot Block Write Protection bit
  1383                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  1384                           ;	Data EEPROM Write Protection bit
  1385                           ;	WRTD = OFF, Data EEPROM not write-protected
  1386  30000B                     	org	3145739
  1387  30000B  E0                 	db	224
  1388                           
  1389                           ;Config register CONFIG7L @ 0x30000C
  1390                           ;	Table Read Protection Block 0
  1391                           ;	EBTR0 = OFF, Block 0 (000800-001FFFh) not protected from table reads executed in other
      +                           blocks
  1392                           ;	Table Read Protection Block 1
  1393                           ;	EBTR1 = OFF, Block 1 (002000-003FFFh) not protected from table reads executed in other
      +                           blocks
  1394                           ;	Table Read Protection Block 2
  1395                           ;	EBTR2 = OFF, Block 2 (004000-005FFFh) not protected from table reads executed in other
      +                           blocks
  1396                           ;	Table Read Protection Block 3
  1397                           ;	EBTR3 = OFF, Block 3 (006000-007FFFh) not protected from table reads executed in other
      +                           blocks
  1398  30000C                     	org	3145740
  1399  30000C  0F                 	db	15
  1400                           
  1401                           ;Config register CONFIG7H @ 0x30000D
  1402                           ;	Boot Block Table Read Protection bit
  1403                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  1404  30000D                     	org	3145741
  1405  30000D  40                 	db	64
  1406                           tosu	equ	0xFFF
  1407                           tosh	equ	0xFFE
  1408                           tosl	equ	0xFFD
  1409                           stkptr	equ	0xFFC
  1410                           pclatu	equ	0xFFB
  1411                           pclath	equ	0xFFA
  1412                           pcl	equ	0xFF9
  1413                           tblptru	equ	0xFF8
  1414                           tblptrh	equ	0xFF7
  1415                           tblptrl	equ	0xFF6
  1416                           tablat	equ	0xFF5
  1417                           prodh	equ	0xFF4
  1418                           prodl	equ	0xFF3
  1419                           indf0	equ	0xFEF
  1420                           postinc0	equ	0xFEE
  1421                           postdec0	equ	0xFED
  1422                           preinc0	equ	0xFEC
  1423                           plusw0	equ	0xFEB
  1424                           fsr0h	equ	0xFEA
  1425                           fsr0l	equ	0xFE9
  1426                           wreg	equ	0xFE8
  1427                           indf1	equ	0xFE7
  1428                           postinc1	equ	0xFE6
  1429                           postdec1	equ	0xFE5
  1430                           preinc1	equ	0xFE4
  1431                           plusw1	equ	0xFE3
  1432                           fsr1h	equ	0xFE2
  1433                           fsr1l	equ	0xFE1
  1434                           bsr	equ	0xFE0
  1435                           indf2	equ	0xFDF
  1436                           postinc2	equ	0xFDE
  1437                           postdec2	equ	0xFDD
  1438                           preinc2	equ	0xFDC
  1439                           plusw2	equ	0xFDB
  1440                           fsr2h	equ	0xFDA
  1441                           fsr2l	equ	0xFD9
  1442                           status	equ	0xFD8

Data Sizes:
    Strings     29
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     13      13
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    DisplayLCD_Out_Cp@Ponteiro	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 

    DisplayLCD_Out@TextoLCD	PTR unsigned char  size(2) Largest target is 16
		 -> STR_2(CODE[13]), STR_1(CODE[16]), 


Critical Paths under _main in COMRAM

    _main->_DisplayLCD_Out
    _DisplayLCD_Out->_DisplayLCD_Out_Cp
    _DisplayLCD_Out_Cp->_LCD_Write_Data
    _DisplayLCD_Init->_DisplayLCD_Cmd
    _DisplayLCD_Cmd->_LCD_Write_Data
    _DisplayLCD_Chr->_DisplayLCD_Chr_Cp
    _DisplayLCD_Chr_Cp->_LCD_Write_Data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    6182
                                             11 COMRAM     2     2      0
                          _ConfigMCU
                     _DisplayLCD_Chr
                  _DisplayLCD_Chr_Cp
                     _DisplayLCD_Cmd
                    _DisplayLCD_Init
                     _DisplayLCD_Out
 ---------------------------------------------------------------------------------
 (1) _DisplayLCD_Out                                       6     3      3    2065
                                              5 COMRAM     6     3      3
                  _DisplayLCD_Out_Cp
                     _LCD_Write_Data
 ---------------------------------------------------------------------------------
 (2) _DisplayLCD_Out_Cp                                    2     0      2     874
                                              3 COMRAM     2     0      2
                     _LCD_Write_Data
 ---------------------------------------------------------------------------------
 (1) _DisplayLCD_Init                                      2     2      0     775
                                              4 COMRAM     2     2      0
                     _DisplayLCD_Cmd
                         _LCD_Enable
 ---------------------------------------------------------------------------------
 (2) _DisplayLCD_Cmd                                       1     1      0     775
                                              3 COMRAM     1     1      0
                     _LCD_Write_Data
 ---------------------------------------------------------------------------------
 (1) _DisplayLCD_Chr                                       5     3      2    1792
                                              4 COMRAM     5     3      2
                  _DisplayLCD_Chr_Cp
                     _LCD_Write_Data
 ---------------------------------------------------------------------------------
 (1) _DisplayLCD_Chr_Cp                                    1     1      0     775
                                              3 COMRAM     1     1      0
                     _LCD_Write_Data
 ---------------------------------------------------------------------------------
 (2) _LCD_Write_Data                                       3     2      1     753
                                              0 COMRAM     3     2      1
                         _LCD_Enable
 ---------------------------------------------------------------------------------
 (3) _LCD_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigMCU                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigMCU
   _DisplayLCD_Chr
     _DisplayLCD_Chr_Cp
       _LCD_Write_Data
         _LCD_Enable
     _LCD_Write_Data
   _DisplayLCD_Chr_Cp
   _DisplayLCD_Cmd
     _LCD_Write_Data
   _DisplayLCD_Init
     _DisplayLCD_Cmd
     _LCD_Enable
   _DisplayLCD_Out
     _DisplayLCD_Out_Cp
       _LCD_Write_Data
     _LCD_Write_Data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      D       D       1       13.7%
STACK                0      0       0       2        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK2           100      0       0       7        0.0%
BANK2              100      0       0       8        0.0%
BITBANK3           100      0       0       9        0.0%
BANK3              100      0       0      10        0.0%
BITBANK4           100      0       0      11        0.0%
BANK4              100      0       0      12        0.0%
BITBANK5           100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
BITBIGSFRhh         69      0       0      15        0.0%
BITBIGSFRhlh         1      0       0      16        0.0%
BITBIGSFRhll         5      0       0      17        0.0%
BITBIGSFRlhh         1      0       0      18        0.0%
BITBIGSFRlhl        50      0       0      19        0.0%
BITBIGSFRll          1      0       0      20        0.0%
ABS                  0      0       0      21        0.0%
BIGRAM             5FF      0       0      22        0.0%
DATA                 0      0       0      23        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.36 build 20220127204148 
Symbol Table                                                                                   Sun Aug 28 18:02:24 2022

              ?_LCD_Enable 0001                         l23 075A                         l32 099E  
                       l26 0982                         l42 08CA                         l35 07E0  
                       l29 0990                         l55 092A                         l48 0964  
                       l58 09B0                        l742 0966                        l744 096E  
                      l746 0978                        l930 065C                        l940 06CE  
                      l932 067E                        l924 0622                        l942 06EE  
                      l934 06A2                        l926 062C                        l950 0986  
                      l856 09AA                        l944 0710                        l936 06C4  
                      l928 063C                        l952 0994                        l960 0948  
                      l946 0734                        l938 06C8                        l970 0790  
                      l962 075C                        l954 092C                        l948 0756  
                      l980 07AC                        l972 0794                        l964 0774  
                      l956 0930                        l990 07DA                        l982 07BA  
                      l974 0798                        l966 078C                        l958 0944  
                      l984 07C8                        l976 079C                        l968 078E  
                      l992 0866                        l986 07CE                        l978 07AA  
                      l994 086C                        l988 07D4                        l996 0872  
                      l998 0880                        u200 064E                        u201 0646  
                      u300 0700                        u220 066E                        u301 06F8  
                      u221 0666                        u320 0722                        u240 0690  
                      u321 071A                        u241 0688                        u218 0650  
                      u340 0746                        u260 06B4                        u341 073E  
                      u261 06AC                        u318 0702                        u238 0670  
                      u407 07A2                        u280 06E0                        u360 0964  
                      u281 06D8                        u417 07C0                        u361 0960  
                      u338 0724                        u258 0692                        u427 0632  
                      u195 062A                        u196 062C                        u437 0968  
                      u358 0748                        u278 06B6                        u447 0972  
                      u457 097C                        u377 0838                        u298 06E2  
                      u387 0850                        u397 077E                        wreg 000FE8  
                     l1000 0886                       l1100 090E                       l1020 08EC  
                     l1012 08CE                       l1004 0894                       l1014 08D4  
                     l1006 08BE                       l1016 08DA                       l1024 08FA  
                     l1040 07EE                       l1032 07E2                       l1018 08E8  
                     l1026 0924                       l1050 082C                       l1042 07F4  
                     l1034 07E6                       l1052 082E                       l1044 0806  
                     l1036 07E8                       l1054 0844                       l1046 0818  
                     l1038 07EA                       l1056 0846                       l1048 0826  
                     l1098 08A8                       STR_1 0601                       STR_2 0611  
                     _main 07E2                       start 0000               ___param_bank 000000  
                    ?_main 0001        DisplayLCD_Chr@Linha 0009        DisplayLCD_Chr@Tchar 0006  
                    tablat 000FF5                      status 000FD8             _LCD_Write_Data 0620  
          __initialization 09A0               __end_of_main 0864            _DisplayLCD_Init 075C  
                   ??_main 000C              __activetblptr 000002                     _ANSELB 000F39  
      DisplayLCD_Out@Linha 000B     __end_of_LCD_Write_Data 075C       DisplayLCD_Cmd@CmdLCD 0004  
     DisplayLCD_Chr@Coluna 0005                     isa$std 000001           LCD_Write_Data@RS 0003  
             __mediumconst 0000                     tblptrh 000FF7                     tblptrl 000FF6  
                   tblptru 000FF8                 __accesstop 0060    __end_of__initialization 09A0  
            ___rparam_used 000001            ?_LCD_Write_Data 0001          __end_of_ConfigMCU 09B2  
           __pcstackCOMRAM 0001               ??_LCD_Enable 0001    __end_of_DisplayLCD_Init 07E2  
       __end_of_LCD_Enable 0984       DisplayLCD_Out@Coluna 0006                    __Hparam 0000  
                  __Lparam 0000           ?_DisplayLCD_Init 0001               __psmallconst 0600  
                  __pcinit 09A0                    __ramtop 0600                    __ptext0 07E2  
                  __ptext1 0864                    __ptext2 092C                    __ptext3 075C  
                  __ptext4 0984                    __ptext5 08CC                    __ptext6 0992  
                  __ptext7 0620                    __ptext8 0966                    __ptext9 09AA  
     end_of_initialization 09A0              __Lmediumconst 0000  DisplayLCD_Out_Cp@Ponteiro 0004  
                _TRISBbits 000F93                  _TRISDbits 000F95                  _TRISEbits 000F96  
         ??_LCD_Write_Data 0002     DisplayLCD_Out@TextoLCD 0007                  _ConfigMCU 09AA  
      start_initialization 09A0             _DisplayLCD_Cmd 0984             _DisplayLCD_Chr 08CC  
           _DisplayLCD_Out 0864          _DisplayLCD_Chr_Cp 0992                 ?_ConfigMCU 0001  
       ?_DisplayLCD_Chr_Cp 0001          _DisplayLCD_Out_Cp 092C         ?_DisplayLCD_Out_Cp 0004  
      ??_DisplayLCD_Chr_Cp 0004     __end_of_DisplayLCD_Cmd 0992     __end_of_DisplayLCD_Chr 092C  
   __end_of_DisplayLCD_Out 08CC        ??_DisplayLCD_Out_Cp 0006  __end_of_DisplayLCD_Chr_Cp 09A0  
__end_of_DisplayLCD_Out_Cp 0966                __smallconst 0600            ?_DisplayLCD_Cmd 0001  
          ?_DisplayLCD_Chr 0005            ?_DisplayLCD_Out 0006                   _LATBbits 000F8A  
                 _LATDbits 000F8C                   _LATEbits 000F8D                ??_ConfigMCU 0001  
                 __Hrparam 0000                   __Lrparam 0000                   isa$xinst 000000  
               _LCD_Enable 0966         LCD_Write_Data@Data 0001          ??_DisplayLCD_Init 0005  
         ??_DisplayLCD_Cmd 0004           ??_DisplayLCD_Chr 0007           ??_DisplayLCD_Out 0009  
   DisplayLCD_Chr_Cp@Tchar 0004  
